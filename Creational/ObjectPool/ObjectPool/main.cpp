#include "ObjectPool.h"

#include <iostream>

/*
 Пул объектов - основная идея состоит в том, чтобы избежать создания новых экземпляров класса в случае возможности их повторного использования. Такой подход повышает производительность при создание экземпляров некоторого класса, которые требует больших затрат и создаются часто, но число создаваемых объектов в единицу времени ограничено. Пул объектов, который может избежать создания новых объектов, запрашивая в пуле уже созданный экземпляр. Когда объекты больше не нужны, они возвращаются в пул для дальнейшего повторного использования. Если при очередном запросе все объекты пула заняты, то процесс будет ожидать освобождения объекта. Для исключетельной ситуации пул объектов должен уметь создавать новые объекты по мере необходимости, но при этом он также должен иметь механизм периодической очистки неиспользуемых объектов.
 */

int main()
{
    ObjectPool<std::string> pool;

    auto p1 = pool.Allocate();
    auto p2 = pool.Allocate();
    auto p3 = pool.Allocate();

    *p1 = "first";
    *p2 = "second";
    *p3 = "third";

    try 
    {
        pool.Deallocate(p2);
        pool.Deallocate(p3);
        pool.Deallocate(p1);
        pool.Deallocate(p1);
    } 
    catch (const std::invalid_argument& exception)
    {
        std::cout << exception.what() << std::endl;
    }
    return 0;
}
